// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module process_action (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_din_gmem_V_AWVALID,
        m_axi_din_gmem_V_AWREADY,
        m_axi_din_gmem_V_AWADDR,
        m_axi_din_gmem_V_AWID,
        m_axi_din_gmem_V_AWLEN,
        m_axi_din_gmem_V_AWSIZE,
        m_axi_din_gmem_V_AWBURST,
        m_axi_din_gmem_V_AWLOCK,
        m_axi_din_gmem_V_AWCACHE,
        m_axi_din_gmem_V_AWPROT,
        m_axi_din_gmem_V_AWQOS,
        m_axi_din_gmem_V_AWREGION,
        m_axi_din_gmem_V_AWUSER,
        m_axi_din_gmem_V_WVALID,
        m_axi_din_gmem_V_WREADY,
        m_axi_din_gmem_V_WDATA,
        m_axi_din_gmem_V_WSTRB,
        m_axi_din_gmem_V_WLAST,
        m_axi_din_gmem_V_WID,
        m_axi_din_gmem_V_WUSER,
        m_axi_din_gmem_V_ARVALID,
        m_axi_din_gmem_V_ARREADY,
        m_axi_din_gmem_V_ARADDR,
        m_axi_din_gmem_V_ARID,
        m_axi_din_gmem_V_ARLEN,
        m_axi_din_gmem_V_ARSIZE,
        m_axi_din_gmem_V_ARBURST,
        m_axi_din_gmem_V_ARLOCK,
        m_axi_din_gmem_V_ARCACHE,
        m_axi_din_gmem_V_ARPROT,
        m_axi_din_gmem_V_ARQOS,
        m_axi_din_gmem_V_ARREGION,
        m_axi_din_gmem_V_ARUSER,
        m_axi_din_gmem_V_RVALID,
        m_axi_din_gmem_V_RREADY,
        m_axi_din_gmem_V_RDATA,
        m_axi_din_gmem_V_RLAST,
        m_axi_din_gmem_V_RID,
        m_axi_din_gmem_V_RUSER,
        m_axi_din_gmem_V_RRESP,
        m_axi_din_gmem_V_BVALID,
        m_axi_din_gmem_V_BREADY,
        m_axi_din_gmem_V_BRESP,
        m_axi_din_gmem_V_BID,
        m_axi_din_gmem_V_BUSER,
        din_gmem_V_offset,
        dout_gmem_V_offset,
        act_reg_Data_in_addr,
        act_reg_Data_in_size,
        act_reg_Data_out_add
);

parameter    ap_ST_fsm_state1 = 82'd1;
parameter    ap_ST_fsm_state2 = 82'd2;
parameter    ap_ST_fsm_state3 = 82'd4;
parameter    ap_ST_fsm_state4 = 82'd8;
parameter    ap_ST_fsm_state5 = 82'd16;
parameter    ap_ST_fsm_state6 = 82'd32;
parameter    ap_ST_fsm_state7 = 82'd64;
parameter    ap_ST_fsm_state8 = 82'd128;
parameter    ap_ST_fsm_state9 = 82'd256;
parameter    ap_ST_fsm_state10 = 82'd512;
parameter    ap_ST_fsm_state11 = 82'd1024;
parameter    ap_ST_fsm_state12 = 82'd2048;
parameter    ap_ST_fsm_state13 = 82'd4096;
parameter    ap_ST_fsm_state14 = 82'd8192;
parameter    ap_ST_fsm_state15 = 82'd16384;
parameter    ap_ST_fsm_state16 = 82'd32768;
parameter    ap_ST_fsm_state17 = 82'd65536;
parameter    ap_ST_fsm_state18 = 82'd131072;
parameter    ap_ST_fsm_state19 = 82'd262144;
parameter    ap_ST_fsm_state20 = 82'd524288;
parameter    ap_ST_fsm_state21 = 82'd1048576;
parameter    ap_ST_fsm_state22 = 82'd2097152;
parameter    ap_ST_fsm_state23 = 82'd4194304;
parameter    ap_ST_fsm_state24 = 82'd8388608;
parameter    ap_ST_fsm_state25 = 82'd16777216;
parameter    ap_ST_fsm_state26 = 82'd33554432;
parameter    ap_ST_fsm_state27 = 82'd67108864;
parameter    ap_ST_fsm_state28 = 82'd134217728;
parameter    ap_ST_fsm_state29 = 82'd268435456;
parameter    ap_ST_fsm_state30 = 82'd536870912;
parameter    ap_ST_fsm_state31 = 82'd1073741824;
parameter    ap_ST_fsm_state32 = 82'd2147483648;
parameter    ap_ST_fsm_state33 = 82'd4294967296;
parameter    ap_ST_fsm_state34 = 82'd8589934592;
parameter    ap_ST_fsm_state35 = 82'd17179869184;
parameter    ap_ST_fsm_state36 = 82'd34359738368;
parameter    ap_ST_fsm_state37 = 82'd68719476736;
parameter    ap_ST_fsm_state38 = 82'd137438953472;
parameter    ap_ST_fsm_state39 = 82'd274877906944;
parameter    ap_ST_fsm_state40 = 82'd549755813888;
parameter    ap_ST_fsm_state41 = 82'd1099511627776;
parameter    ap_ST_fsm_state42 = 82'd2199023255552;
parameter    ap_ST_fsm_state43 = 82'd4398046511104;
parameter    ap_ST_fsm_state44 = 82'd8796093022208;
parameter    ap_ST_fsm_state45 = 82'd17592186044416;
parameter    ap_ST_fsm_state46 = 82'd35184372088832;
parameter    ap_ST_fsm_state47 = 82'd70368744177664;
parameter    ap_ST_fsm_state48 = 82'd140737488355328;
parameter    ap_ST_fsm_state49 = 82'd281474976710656;
parameter    ap_ST_fsm_state50 = 82'd562949953421312;
parameter    ap_ST_fsm_state51 = 82'd1125899906842624;
parameter    ap_ST_fsm_state52 = 82'd2251799813685248;
parameter    ap_ST_fsm_state53 = 82'd4503599627370496;
parameter    ap_ST_fsm_state54 = 82'd9007199254740992;
parameter    ap_ST_fsm_state55 = 82'd18014398509481984;
parameter    ap_ST_fsm_state56 = 82'd36028797018963968;
parameter    ap_ST_fsm_state57 = 82'd72057594037927936;
parameter    ap_ST_fsm_state58 = 82'd144115188075855872;
parameter    ap_ST_fsm_state59 = 82'd288230376151711744;
parameter    ap_ST_fsm_state60 = 82'd576460752303423488;
parameter    ap_ST_fsm_state61 = 82'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 82'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 82'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 82'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 82'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 82'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 82'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 82'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 82'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 82'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 82'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 82'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 82'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 82'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 82'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 82'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 82'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 82'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 82'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 82'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 82'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 82'd2417851639229258349412352;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_din_gmem_V_AWVALID;
input   m_axi_din_gmem_V_AWREADY;
output  [63:0] m_axi_din_gmem_V_AWADDR;
output  [0:0] m_axi_din_gmem_V_AWID;
output  [31:0] m_axi_din_gmem_V_AWLEN;
output  [2:0] m_axi_din_gmem_V_AWSIZE;
output  [1:0] m_axi_din_gmem_V_AWBURST;
output  [1:0] m_axi_din_gmem_V_AWLOCK;
output  [3:0] m_axi_din_gmem_V_AWCACHE;
output  [2:0] m_axi_din_gmem_V_AWPROT;
output  [3:0] m_axi_din_gmem_V_AWQOS;
output  [3:0] m_axi_din_gmem_V_AWREGION;
output  [0:0] m_axi_din_gmem_V_AWUSER;
output   m_axi_din_gmem_V_WVALID;
input   m_axi_din_gmem_V_WREADY;
output  [511:0] m_axi_din_gmem_V_WDATA;
output  [63:0] m_axi_din_gmem_V_WSTRB;
output   m_axi_din_gmem_V_WLAST;
output  [0:0] m_axi_din_gmem_V_WID;
output  [0:0] m_axi_din_gmem_V_WUSER;
output   m_axi_din_gmem_V_ARVALID;
input   m_axi_din_gmem_V_ARREADY;
output  [63:0] m_axi_din_gmem_V_ARADDR;
output  [0:0] m_axi_din_gmem_V_ARID;
output  [31:0] m_axi_din_gmem_V_ARLEN;
output  [2:0] m_axi_din_gmem_V_ARSIZE;
output  [1:0] m_axi_din_gmem_V_ARBURST;
output  [1:0] m_axi_din_gmem_V_ARLOCK;
output  [3:0] m_axi_din_gmem_V_ARCACHE;
output  [2:0] m_axi_din_gmem_V_ARPROT;
output  [3:0] m_axi_din_gmem_V_ARQOS;
output  [3:0] m_axi_din_gmem_V_ARREGION;
output  [0:0] m_axi_din_gmem_V_ARUSER;
input   m_axi_din_gmem_V_RVALID;
output   m_axi_din_gmem_V_RREADY;
input  [511:0] m_axi_din_gmem_V_RDATA;
input   m_axi_din_gmem_V_RLAST;
input  [0:0] m_axi_din_gmem_V_RID;
input  [0:0] m_axi_din_gmem_V_RUSER;
input  [1:0] m_axi_din_gmem_V_RRESP;
input   m_axi_din_gmem_V_BVALID;
output   m_axi_din_gmem_V_BREADY;
input  [1:0] m_axi_din_gmem_V_BRESP;
input  [0:0] m_axi_din_gmem_V_BID;
input  [0:0] m_axi_din_gmem_V_BUSER;
input  [57:0] din_gmem_V_offset;
input  [57:0] dout_gmem_V_offset;
input  [63:0] act_reg_Data_in_addr;
input  [31:0] act_reg_Data_in_size;
input  [63:0] act_reg_Data_out_add;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_din_gmem_V_AWVALID;
reg m_axi_din_gmem_V_WVALID;
reg m_axi_din_gmem_V_ARVALID;
reg m_axi_din_gmem_V_RREADY;
reg m_axi_din_gmem_V_BREADY;

(* fsm_encoding = "none" *) reg   [81:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    din_gmem_V_blk_n_AR;
wire    ap_CS_fsm_state3;
reg    din_gmem_V_blk_n_R;
wire    ap_CS_fsm_state10;
reg    din_gmem_V_blk_n_AW;
wire    ap_CS_fsm_state76;
reg    din_gmem_V_blk_n_W;
wire    ap_CS_fsm_state77;
reg    din_gmem_V_blk_n_B;
wire    ap_CS_fsm_state82;
wire   [63:0] dout_gmem_V_offset_c_fu_1093_p1;
reg   [63:0] dout_gmem_V_offset_c_reg_1956;
wire   [63:0] din_gmem_V_offset_ca_fu_1097_p1;
reg   [63:0] din_gmem_V_offset_ca_reg_1961;
wire   [63:0] i_idx_2_fu_1111_p1;
wire   [63:0] o_idx_2_fu_1125_p1;
wire   [63:0] sum_fu_1135_p2;
reg   [63:0] sum_reg_2299;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_1129_p2;
reg    ap_sig_ioackin_m_axi_din_gmem_V_ARREADY;
wire   [7:0] tmp_72_fu_1146_p1;
reg   [7:0] tmp_72_reg_2310;
reg   [7:0] tmp_4_reg_2315;
reg   [7:0] tmp_6_reg_2320;
reg   [7:0] tmp_8_reg_2325;
reg   [7:0] tmp_s_reg_2330;
reg   [7:0] tmp_5_reg_2335;
reg   [7:0] tmp_7_reg_2340;
reg   [7:0] tmp_9_reg_2345;
reg   [7:0] tmp_10_reg_2350;
reg   [7:0] tmp_11_reg_2355;
reg   [7:0] tmp_12_reg_2360;
reg   [7:0] tmp_13_reg_2365;
reg   [7:0] tmp_14_reg_2370;
reg   [7:0] tmp_15_reg_2375;
reg   [7:0] tmp_16_reg_2380;
reg   [7:0] tmp_17_reg_2385;
reg   [7:0] tmp_18_reg_2390;
reg   [7:0] tmp_19_reg_2395;
reg   [7:0] tmp_20_reg_2400;
reg   [7:0] tmp_21_reg_2405;
reg   [7:0] tmp_22_reg_2410;
reg   [7:0] tmp_23_reg_2415;
reg   [7:0] tmp_24_reg_2420;
reg   [7:0] tmp_25_reg_2425;
reg   [7:0] tmp_26_reg_2430;
reg   [7:0] tmp_27_reg_2435;
reg   [7:0] tmp_28_reg_2440;
reg   [7:0] tmp_29_reg_2445;
reg   [7:0] tmp_30_reg_2450;
reg   [7:0] tmp_31_reg_2455;
reg   [7:0] tmp_32_reg_2460;
reg   [7:0] tmp_33_reg_2465;
reg   [7:0] tmp_34_reg_2470;
reg   [7:0] tmp_35_reg_2475;
reg   [7:0] tmp_36_reg_2480;
reg   [7:0] tmp_37_reg_2485;
reg   [7:0] tmp_38_reg_2490;
reg   [7:0] tmp_39_reg_2495;
reg   [7:0] tmp_40_reg_2500;
reg   [7:0] tmp_41_reg_2505;
reg   [7:0] tmp_42_reg_2510;
reg   [7:0] tmp_43_reg_2515;
reg   [7:0] tmp_44_reg_2520;
reg   [7:0] tmp_45_reg_2525;
reg   [7:0] tmp_46_reg_2530;
reg   [7:0] tmp_47_reg_2535;
reg   [7:0] tmp_48_reg_2540;
reg   [7:0] tmp_49_reg_2545;
reg   [7:0] tmp_50_reg_2550;
reg   [7:0] tmp_51_reg_2555;
reg   [7:0] tmp_52_reg_2560;
reg   [7:0] tmp_53_reg_2565;
reg   [7:0] tmp_54_reg_2570;
reg   [7:0] tmp_55_reg_2575;
reg   [7:0] tmp_56_reg_2580;
reg   [7:0] tmp_57_reg_2585;
reg   [7:0] tmp_58_reg_2590;
reg   [7:0] tmp_59_reg_2595;
reg   [7:0] tmp_60_reg_2600;
reg   [7:0] tmp_61_reg_2605;
reg   [7:0] tmp_62_reg_2610;
reg   [7:0] tmp_63_reg_2615;
reg   [7:0] tmp_64_reg_2620;
reg   [7:0] tmp_65_reg_2625;
wire   [31:0] bytes_to_transfer_ca_fu_1808_p1;
reg   [31:0] bytes_to_transfer_ca_reg_2630;
wire    ap_CS_fsm_state42;
wire   [6:0] i_1_fu_1818_p2;
reg   [6:0] i_1_reg_2638;
wire    ap_CS_fsm_state43;
reg   [5:0] text_addr_64_reg_2643;
wire   [0:0] tmp_66_fu_1812_p2;
wire   [63:0] sum3_fu_1829_p2;
reg   [63:0] sum3_reg_2649;
wire   [31:0] size_fu_1834_p2;
reg   [31:0] size_reg_2654;
wire   [63:0] i_idx_1_fu_1839_p2;
reg   [63:0] i_idx_1_reg_2659;
wire   [63:0] o_idx_1_fu_1845_p2;
reg   [63:0] o_idx_1_reg_2664;
wire   [7:0] text_q0;
reg   [7:0] text_load_reg_2672;
wire    ap_CS_fsm_state45;
wire   [7:0] text_q1;
reg   [7:0] text_load_1_reg_2677;
reg   [7:0] text_load_2_reg_2682;
wire    ap_CS_fsm_state46;
reg   [7:0] text_load_3_reg_2687;
reg   [7:0] text_load_4_reg_2692;
wire    ap_CS_fsm_state47;
reg   [7:0] text_load_5_reg_2697;
reg   [7:0] text_load_6_reg_2702;
wire    ap_CS_fsm_state48;
reg   [7:0] text_load_7_reg_2707;
reg   [7:0] text_load_8_reg_2712;
wire    ap_CS_fsm_state49;
reg   [7:0] text_load_9_reg_2717;
reg   [7:0] text_load_10_reg_2722;
wire    ap_CS_fsm_state50;
reg   [7:0] text_load_11_reg_2727;
reg   [7:0] text_load_12_reg_2732;
wire    ap_CS_fsm_state51;
reg   [7:0] text_load_13_reg_2737;
reg   [7:0] text_load_14_reg_2742;
wire    ap_CS_fsm_state52;
reg   [7:0] text_load_15_reg_2747;
reg   [7:0] text_load_16_reg_2752;
wire    ap_CS_fsm_state53;
reg   [7:0] text_load_17_reg_2757;
reg   [7:0] text_load_18_reg_2762;
wire    ap_CS_fsm_state54;
reg   [7:0] text_load_19_reg_2767;
reg   [7:0] text_load_20_reg_2772;
wire    ap_CS_fsm_state55;
reg   [7:0] text_load_21_reg_2777;
reg   [7:0] text_load_22_reg_2782;
wire    ap_CS_fsm_state56;
reg   [7:0] text_load_23_reg_2787;
reg   [7:0] text_load_24_reg_2792;
wire    ap_CS_fsm_state57;
reg   [7:0] text_load_25_reg_2797;
reg   [7:0] text_load_26_reg_2802;
wire    ap_CS_fsm_state58;
reg   [7:0] text_load_27_reg_2807;
reg   [7:0] text_load_28_reg_2812;
wire    ap_CS_fsm_state59;
reg   [7:0] text_load_29_reg_2817;
reg   [7:0] text_load_30_reg_2822;
wire    ap_CS_fsm_state60;
reg   [7:0] text_load_31_reg_2827;
reg   [7:0] text_load_32_reg_2832;
wire    ap_CS_fsm_state61;
reg   [7:0] text_load_33_reg_2837;
reg   [7:0] text_load_34_reg_2842;
wire    ap_CS_fsm_state62;
reg   [7:0] text_load_35_reg_2847;
reg   [7:0] text_load_36_reg_2852;
wire    ap_CS_fsm_state63;
reg   [7:0] text_load_37_reg_2857;
reg   [7:0] text_load_38_reg_2862;
wire    ap_CS_fsm_state64;
reg   [7:0] text_load_39_reg_2867;
reg   [7:0] text_load_40_reg_2872;
wire    ap_CS_fsm_state65;
reg   [7:0] text_load_41_reg_2877;
reg   [7:0] text_load_42_reg_2882;
wire    ap_CS_fsm_state66;
reg   [7:0] text_load_43_reg_2887;
reg   [7:0] text_load_44_reg_2892;
wire    ap_CS_fsm_state67;
reg   [7:0] text_load_45_reg_2897;
reg   [7:0] text_load_46_reg_2902;
wire    ap_CS_fsm_state68;
reg   [7:0] text_load_47_reg_2907;
reg   [7:0] text_load_48_reg_2912;
wire    ap_CS_fsm_state69;
reg   [7:0] text_load_49_reg_2917;
reg   [7:0] text_load_50_reg_2922;
wire    ap_CS_fsm_state70;
reg   [7:0] text_load_51_reg_2927;
reg   [7:0] text_load_52_reg_2932;
wire    ap_CS_fsm_state71;
reg   [7:0] text_load_53_reg_2937;
reg   [7:0] text_load_54_reg_2942;
wire    ap_CS_fsm_state72;
reg   [7:0] text_load_55_reg_2947;
reg   [7:0] text_load_56_reg_2952;
wire    ap_CS_fsm_state73;
reg   [7:0] text_load_57_reg_2957;
reg   [7:0] text_load_58_reg_2962;
wire    ap_CS_fsm_state74;
reg   [7:0] text_load_59_reg_2967;
reg   [7:0] text_load_60_reg_2972;
wire    ap_CS_fsm_state75;
reg   [7:0] text_load_61_reg_2977;
reg    ap_sig_ioackin_m_axi_din_gmem_V_AWREADY;
reg   [7:0] text_load_62_reg_2988;
reg   [7:0] text_load_63_reg_2993;
reg   [5:0] text_address0;
reg    text_ce0;
reg    text_we0;
reg   [7:0] text_d0;
reg   [5:0] text_address1;
reg    text_ce1;
reg    text_we1;
reg   [7:0] text_d1;
reg   [31:0] size1_reg_1052;
reg   [63:0] i_idx1_reg_1062;
reg   [63:0] o_idx1_reg_1072;
reg   [6:0] i_reg_1082;
wire    ap_CS_fsm_state44;
wire   [63:0] tmp_68_fu_1824_p1;
reg    ap_reg_ioackin_m_axi_din_gmem_V_ARREADY;
reg    ap_reg_ioackin_m_axi_din_gmem_V_AWREADY;
reg    ap_reg_ioackin_m_axi_din_gmem_V_WREADY;
reg    ap_sig_ioackin_m_axi_din_gmem_V_WREADY;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire   [0:0] or_cond_fu_1863_p2;
wire   [7:0] tmp_71_fu_1869_p2;
wire   [57:0] i_idx_fu_1101_p4;
wire   [57:0] o_idx_fu_1115_p4;
wire   [25:0] tmp_1_fu_1780_p4;
wire   [0:0] icmp_fu_1790_p2;
wire   [6:0] tmp_2_fu_1796_p1;
wire   [6:0] bytes_to_transfer_fu_1800_p3;
wire   [0:0] tmp_69_fu_1851_p2;
wire   [0:0] tmp_70_fu_1857_p2;
reg   [81:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 82'd1;
#0 ap_reg_ioackin_m_axi_din_gmem_V_ARREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_din_gmem_V_AWREADY = 1'b0;
#0 ap_reg_ioackin_m_axi_din_gmem_V_WREADY = 1'b0;
end

process_action_text #(
    .DataWidth( 8 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
text_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(text_address0),
    .ce0(text_ce0),
    .we0(text_we0),
    .d0(text_d0),
    .q0(text_q0),
    .address1(text_address1),
    .ce1(text_ce1),
    .we1(text_we1),
    .d1(text_d1),
    .q1(text_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            if ((ap_sig_ioackin_m_axi_din_gmem_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= 1'b0;
            end else if ((m_axi_din_gmem_V_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_din_gmem_V_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_din_gmem_V_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state76)) begin
            if ((ap_sig_ioackin_m_axi_din_gmem_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_din_gmem_V_AWREADY <= 1'b0;
            end else if ((m_axi_din_gmem_V_AWREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_din_gmem_V_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_din_gmem_V_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state77)) begin
            if ((ap_sig_ioackin_m_axi_din_gmem_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_din_gmem_V_WREADY <= 1'b0;
            end else if ((m_axi_din_gmem_V_WREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_din_gmem_V_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) & (m_axi_din_gmem_V_BVALID == 1'b1))) begin
        i_idx1_reg_1062 <= i_idx_1_reg_2659;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_idx1_reg_1062 <= i_idx_2_fu_1111_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        i_reg_1082 <= i_1_reg_2638;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        i_reg_1082 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) & (m_axi_din_gmem_V_BVALID == 1'b1))) begin
        o_idx1_reg_1072 <= o_idx_1_reg_2664;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        o_idx1_reg_1072 <= o_idx_2_fu_1125_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state82) & (m_axi_din_gmem_V_BVALID == 1'b1))) begin
        size1_reg_1052 <= size_reg_2654;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        size1_reg_1052 <= act_reg_Data_in_size;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        bytes_to_transfer_ca_reg_2630[6 : 0] <= bytes_to_transfer_ca_fu_1808_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        din_gmem_V_offset_ca_reg_1961[57 : 0] <= din_gmem_V_offset_ca_fu_1097_p1[57 : 0];
        dout_gmem_V_offset_c_reg_1956[57 : 0] <= dout_gmem_V_offset_c_fu_1093_p1[57 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_1_reg_2638 <= i_1_fu_1818_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_66_fu_1812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        i_idx_1_reg_2659 <= i_idx_1_fu_1839_p2;
        o_idx_1_reg_2664 <= o_idx_1_fu_1845_p2;
        size_reg_2654 <= size_fu_1834_p2;
        sum3_reg_2649 <= sum3_fu_1829_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_1129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_reg_2299 <= sum_fu_1135_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_66_fu_1812_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        text_addr_64_reg_2643 <= tmp_68_fu_1824_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        text_load_10_reg_2722 <= text_q0;
        text_load_11_reg_2727 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        text_load_12_reg_2732 <= text_q0;
        text_load_13_reg_2737 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        text_load_14_reg_2742 <= text_q0;
        text_load_15_reg_2747 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        text_load_16_reg_2752 <= text_q0;
        text_load_17_reg_2757 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        text_load_18_reg_2762 <= text_q0;
        text_load_19_reg_2767 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        text_load_1_reg_2677 <= text_q1;
        text_load_reg_2672 <= text_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        text_load_20_reg_2772 <= text_q0;
        text_load_21_reg_2777 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        text_load_22_reg_2782 <= text_q0;
        text_load_23_reg_2787 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        text_load_24_reg_2792 <= text_q0;
        text_load_25_reg_2797 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        text_load_26_reg_2802 <= text_q0;
        text_load_27_reg_2807 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        text_load_28_reg_2812 <= text_q0;
        text_load_29_reg_2817 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        text_load_2_reg_2682 <= text_q0;
        text_load_3_reg_2687 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        text_load_30_reg_2822 <= text_q0;
        text_load_31_reg_2827 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        text_load_32_reg_2832 <= text_q0;
        text_load_33_reg_2837 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        text_load_34_reg_2842 <= text_q0;
        text_load_35_reg_2847 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        text_load_36_reg_2852 <= text_q0;
        text_load_37_reg_2857 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        text_load_38_reg_2862 <= text_q0;
        text_load_39_reg_2867 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        text_load_40_reg_2872 <= text_q0;
        text_load_41_reg_2877 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        text_load_42_reg_2882 <= text_q0;
        text_load_43_reg_2887 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        text_load_44_reg_2892 <= text_q0;
        text_load_45_reg_2897 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        text_load_46_reg_2902 <= text_q0;
        text_load_47_reg_2907 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        text_load_48_reg_2912 <= text_q0;
        text_load_49_reg_2917 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        text_load_4_reg_2692 <= text_q0;
        text_load_5_reg_2697 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        text_load_50_reg_2922 <= text_q0;
        text_load_51_reg_2927 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        text_load_52_reg_2932 <= text_q0;
        text_load_53_reg_2937 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        text_load_54_reg_2942 <= text_q0;
        text_load_55_reg_2947 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        text_load_56_reg_2952 <= text_q0;
        text_load_57_reg_2957 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        text_load_58_reg_2962 <= text_q0;
        text_load_59_reg_2967 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        text_load_60_reg_2972 <= text_q0;
        text_load_61_reg_2977 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_sig_ioackin_m_axi_din_gmem_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
        text_load_62_reg_2988 <= text_q0;
        text_load_63_reg_2993 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        text_load_6_reg_2702 <= text_q0;
        text_load_7_reg_2707 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        text_load_8_reg_2712 <= text_q0;
        text_load_9_reg_2717 <= text_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (m_axi_din_gmem_V_RVALID == 1'b1))) begin
        tmp_10_reg_2350 <= {{m_axi_din_gmem_V_RDATA[71:64]}};
        tmp_11_reg_2355 <= {{m_axi_din_gmem_V_RDATA[79:72]}};
        tmp_12_reg_2360 <= {{m_axi_din_gmem_V_RDATA[87:80]}};
        tmp_13_reg_2365 <= {{m_axi_din_gmem_V_RDATA[95:88]}};
        tmp_14_reg_2370 <= {{m_axi_din_gmem_V_RDATA[103:96]}};
        tmp_15_reg_2375 <= {{m_axi_din_gmem_V_RDATA[111:104]}};
        tmp_16_reg_2380 <= {{m_axi_din_gmem_V_RDATA[119:112]}};
        tmp_17_reg_2385 <= {{m_axi_din_gmem_V_RDATA[127:120]}};
        tmp_18_reg_2390 <= {{m_axi_din_gmem_V_RDATA[135:128]}};
        tmp_19_reg_2395 <= {{m_axi_din_gmem_V_RDATA[143:136]}};
        tmp_20_reg_2400 <= {{m_axi_din_gmem_V_RDATA[151:144]}};
        tmp_21_reg_2405 <= {{m_axi_din_gmem_V_RDATA[159:152]}};
        tmp_22_reg_2410 <= {{m_axi_din_gmem_V_RDATA[167:160]}};
        tmp_23_reg_2415 <= {{m_axi_din_gmem_V_RDATA[175:168]}};
        tmp_24_reg_2420 <= {{m_axi_din_gmem_V_RDATA[183:176]}};
        tmp_25_reg_2425 <= {{m_axi_din_gmem_V_RDATA[191:184]}};
        tmp_26_reg_2430 <= {{m_axi_din_gmem_V_RDATA[199:192]}};
        tmp_27_reg_2435 <= {{m_axi_din_gmem_V_RDATA[207:200]}};
        tmp_28_reg_2440 <= {{m_axi_din_gmem_V_RDATA[215:208]}};
        tmp_29_reg_2445 <= {{m_axi_din_gmem_V_RDATA[223:216]}};
        tmp_30_reg_2450 <= {{m_axi_din_gmem_V_RDATA[231:224]}};
        tmp_31_reg_2455 <= {{m_axi_din_gmem_V_RDATA[239:232]}};
        tmp_32_reg_2460 <= {{m_axi_din_gmem_V_RDATA[247:240]}};
        tmp_33_reg_2465 <= {{m_axi_din_gmem_V_RDATA[255:248]}};
        tmp_34_reg_2470 <= {{m_axi_din_gmem_V_RDATA[263:256]}};
        tmp_35_reg_2475 <= {{m_axi_din_gmem_V_RDATA[271:264]}};
        tmp_36_reg_2480 <= {{m_axi_din_gmem_V_RDATA[279:272]}};
        tmp_37_reg_2485 <= {{m_axi_din_gmem_V_RDATA[287:280]}};
        tmp_38_reg_2490 <= {{m_axi_din_gmem_V_RDATA[295:288]}};
        tmp_39_reg_2495 <= {{m_axi_din_gmem_V_RDATA[303:296]}};
        tmp_40_reg_2500 <= {{m_axi_din_gmem_V_RDATA[311:304]}};
        tmp_41_reg_2505 <= {{m_axi_din_gmem_V_RDATA[319:312]}};
        tmp_42_reg_2510 <= {{m_axi_din_gmem_V_RDATA[327:320]}};
        tmp_43_reg_2515 <= {{m_axi_din_gmem_V_RDATA[335:328]}};
        tmp_44_reg_2520 <= {{m_axi_din_gmem_V_RDATA[343:336]}};
        tmp_45_reg_2525 <= {{m_axi_din_gmem_V_RDATA[351:344]}};
        tmp_46_reg_2530 <= {{m_axi_din_gmem_V_RDATA[359:352]}};
        tmp_47_reg_2535 <= {{m_axi_din_gmem_V_RDATA[367:360]}};
        tmp_48_reg_2540 <= {{m_axi_din_gmem_V_RDATA[375:368]}};
        tmp_49_reg_2545 <= {{m_axi_din_gmem_V_RDATA[383:376]}};
        tmp_4_reg_2315 <= {{m_axi_din_gmem_V_RDATA[15:8]}};
        tmp_50_reg_2550 <= {{m_axi_din_gmem_V_RDATA[391:384]}};
        tmp_51_reg_2555 <= {{m_axi_din_gmem_V_RDATA[399:392]}};
        tmp_52_reg_2560 <= {{m_axi_din_gmem_V_RDATA[407:400]}};
        tmp_53_reg_2565 <= {{m_axi_din_gmem_V_RDATA[415:408]}};
        tmp_54_reg_2570 <= {{m_axi_din_gmem_V_RDATA[423:416]}};
        tmp_55_reg_2575 <= {{m_axi_din_gmem_V_RDATA[431:424]}};
        tmp_56_reg_2580 <= {{m_axi_din_gmem_V_RDATA[439:432]}};
        tmp_57_reg_2585 <= {{m_axi_din_gmem_V_RDATA[447:440]}};
        tmp_58_reg_2590 <= {{m_axi_din_gmem_V_RDATA[455:448]}};
        tmp_59_reg_2595 <= {{m_axi_din_gmem_V_RDATA[463:456]}};
        tmp_5_reg_2335 <= {{m_axi_din_gmem_V_RDATA[47:40]}};
        tmp_60_reg_2600 <= {{m_axi_din_gmem_V_RDATA[471:464]}};
        tmp_61_reg_2605 <= {{m_axi_din_gmem_V_RDATA[479:472]}};
        tmp_62_reg_2610 <= {{m_axi_din_gmem_V_RDATA[487:480]}};
        tmp_63_reg_2615 <= {{m_axi_din_gmem_V_RDATA[495:488]}};
        tmp_64_reg_2620 <= {{m_axi_din_gmem_V_RDATA[503:496]}};
        tmp_65_reg_2625 <= {{m_axi_din_gmem_V_RDATA[511:504]}};
        tmp_6_reg_2320 <= {{m_axi_din_gmem_V_RDATA[23:16]}};
        tmp_72_reg_2310 <= tmp_72_fu_1146_p1;
        tmp_7_reg_2340 <= {{m_axi_din_gmem_V_RDATA[55:48]}};
        tmp_8_reg_2325 <= {{m_axi_din_gmem_V_RDATA[31:24]}};
        tmp_9_reg_2345 <= {{m_axi_din_gmem_V_RDATA[63:56]}};
        tmp_s_reg_2330 <= {{m_axi_din_gmem_V_RDATA[39:32]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((tmp_fu_1129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_fu_1129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_din_gmem_V_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_din_gmem_V_ARREADY = m_axi_din_gmem_V_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_din_gmem_V_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_din_gmem_V_AWREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_din_gmem_V_AWREADY = m_axi_din_gmem_V_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_din_gmem_V_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_din_gmem_V_WREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_din_gmem_V_WREADY = m_axi_din_gmem_V_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_din_gmem_V_WREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        din_gmem_V_blk_n_AR = m_axi_din_gmem_V_ARREADY;
    end else begin
        din_gmem_V_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        din_gmem_V_blk_n_AW = m_axi_din_gmem_V_AWREADY;
    end else begin
        din_gmem_V_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        din_gmem_V_blk_n_B = m_axi_din_gmem_V_BVALID;
    end else begin
        din_gmem_V_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        din_gmem_V_blk_n_R = m_axi_din_gmem_V_RVALID;
    end else begin
        din_gmem_V_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        din_gmem_V_blk_n_W = m_axi_din_gmem_V_WREADY;
    end else begin
        din_gmem_V_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_din_gmem_V_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_din_gmem_V_ARVALID = 1'b1;
    end else begin
        m_axi_din_gmem_V_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_din_gmem_V_AWREADY == 1'b0) & (1'b1 == ap_CS_fsm_state76))) begin
        m_axi_din_gmem_V_AWVALID = 1'b1;
    end else begin
        m_axi_din_gmem_V_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state82) & (m_axi_din_gmem_V_BVALID == 1'b1))) begin
        m_axi_din_gmem_V_BREADY = 1'b1;
    end else begin
        m_axi_din_gmem_V_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (m_axi_din_gmem_V_RVALID == 1'b1))) begin
        m_axi_din_gmem_V_RREADY = 1'b1;
    end else begin
        m_axi_din_gmem_V_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_din_gmem_V_WREADY == 1'b0) & (1'b1 == ap_CS_fsm_state77))) begin
        m_axi_din_gmem_V_WVALID = 1'b1;
    end else begin
        m_axi_din_gmem_V_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_66_fu_1812_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43))) begin
        text_address0 = tmp_68_fu_1824_p1;
    end else if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state42))) begin
        text_address0 = 64'd62;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state41))) begin
        text_address0 = 64'd60;
    end else if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state40))) begin
        text_address0 = 64'd58;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state39))) begin
        text_address0 = 64'd56;
    end else if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state38))) begin
        text_address0 = 64'd54;
    end else if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state37))) begin
        text_address0 = 64'd52;
    end else if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state36))) begin
        text_address0 = 64'd50;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state35))) begin
        text_address0 = 64'd48;
    end else if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state34))) begin
        text_address0 = 64'd46;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state66))) begin
        text_address0 = 64'd44;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state65))) begin
        text_address0 = 64'd42;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state64))) begin
        text_address0 = 64'd40;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state63))) begin
        text_address0 = 64'd38;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state62))) begin
        text_address0 = 64'd36;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state61))) begin
        text_address0 = 64'd34;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state60))) begin
        text_address0 = 64'd32;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state59))) begin
        text_address0 = 64'd30;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state58))) begin
        text_address0 = 64'd28;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state57))) begin
        text_address0 = 64'd26;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state56))) begin
        text_address0 = 64'd24;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state55))) begin
        text_address0 = 64'd22;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state54))) begin
        text_address0 = 64'd20;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state53))) begin
        text_address0 = 64'd18;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state52))) begin
        text_address0 = 64'd16;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state51))) begin
        text_address0 = 64'd14;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        text_address0 = 64'd12;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        text_address0 = 64'd10;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state48))) begin
        text_address0 = 64'd8;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state47))) begin
        text_address0 = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state46))) begin
        text_address0 = 64'd4;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state45))) begin
        text_address0 = 64'd2;
    end else if (((1'b1 == ap_CS_fsm_state11) | ((tmp_66_fu_1812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)))) begin
        text_address0 = 64'd0;
    end else begin
        text_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        text_address1 = text_addr_64_reg_2643;
    end else if (((1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state42))) begin
        text_address1 = 64'd63;
    end else if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state41))) begin
        text_address1 = 64'd61;
    end else if (((1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state40))) begin
        text_address1 = 64'd59;
    end else if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state39))) begin
        text_address1 = 64'd57;
    end else if (((1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state38))) begin
        text_address1 = 64'd55;
    end else if (((1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state37))) begin
        text_address1 = 64'd53;
    end else if (((1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state36))) begin
        text_address1 = 64'd51;
    end else if (((1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state35))) begin
        text_address1 = 64'd49;
    end else if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state34))) begin
        text_address1 = 64'd47;
    end else if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state66))) begin
        text_address1 = 64'd45;
    end else if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state65))) begin
        text_address1 = 64'd43;
    end else if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state64))) begin
        text_address1 = 64'd41;
    end else if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state63))) begin
        text_address1 = 64'd39;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state62))) begin
        text_address1 = 64'd37;
    end else if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state61))) begin
        text_address1 = 64'd35;
    end else if (((1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state60))) begin
        text_address1 = 64'd33;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state59))) begin
        text_address1 = 64'd31;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state58))) begin
        text_address1 = 64'd29;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state57))) begin
        text_address1 = 64'd27;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state56))) begin
        text_address1 = 64'd25;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state55))) begin
        text_address1 = 64'd23;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state54))) begin
        text_address1 = 64'd21;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state53))) begin
        text_address1 = 64'd19;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state52))) begin
        text_address1 = 64'd17;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state51))) begin
        text_address1 = 64'd15;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state50))) begin
        text_address1 = 64'd13;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state49))) begin
        text_address1 = 64'd11;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state48))) begin
        text_address1 = 64'd9;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state47))) begin
        text_address1 = 64'd7;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state46))) begin
        text_address1 = 64'd5;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state45))) begin
        text_address1 = 64'd3;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state43))) begin
        text_address1 = 64'd1;
    end else begin
        text_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | ((tmp_66_fu_1812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43)) | ((tmp_66_fu_1812_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state43)))) begin
        text_ce0 = 1'b1;
    end else begin
        text_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34))) begin
        text_ce1 = 1'b1;
    end else begin
        text_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        text_d0 = tmp_64_reg_2620;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        text_d0 = tmp_62_reg_2610;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        text_d0 = tmp_60_reg_2600;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        text_d0 = tmp_58_reg_2590;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        text_d0 = tmp_56_reg_2580;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        text_d0 = tmp_54_reg_2570;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        text_d0 = tmp_52_reg_2560;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        text_d0 = tmp_50_reg_2550;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        text_d0 = tmp_48_reg_2540;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        text_d0 = tmp_46_reg_2530;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        text_d0 = tmp_44_reg_2520;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        text_d0 = tmp_42_reg_2510;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        text_d0 = tmp_40_reg_2500;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        text_d0 = tmp_38_reg_2490;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        text_d0 = tmp_36_reg_2480;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        text_d0 = tmp_34_reg_2470;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        text_d0 = tmp_32_reg_2460;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        text_d0 = tmp_30_reg_2450;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        text_d0 = tmp_28_reg_2440;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        text_d0 = tmp_26_reg_2430;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        text_d0 = tmp_24_reg_2420;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        text_d0 = tmp_22_reg_2410;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        text_d0 = tmp_20_reg_2400;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        text_d0 = tmp_18_reg_2390;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        text_d0 = tmp_16_reg_2380;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        text_d0 = tmp_14_reg_2370;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        text_d0 = tmp_12_reg_2360;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        text_d0 = tmp_10_reg_2350;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        text_d0 = tmp_7_reg_2340;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        text_d0 = tmp_s_reg_2330;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        text_d0 = tmp_6_reg_2320;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        text_d0 = tmp_72_reg_2310;
    end else begin
        text_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        text_d1 = tmp_71_fu_1869_p2;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        text_d1 = tmp_65_reg_2625;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        text_d1 = tmp_63_reg_2615;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        text_d1 = tmp_61_reg_2605;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        text_d1 = tmp_59_reg_2595;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        text_d1 = tmp_57_reg_2585;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        text_d1 = tmp_55_reg_2575;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        text_d1 = tmp_53_reg_2565;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        text_d1 = tmp_51_reg_2555;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        text_d1 = tmp_49_reg_2545;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        text_d1 = tmp_47_reg_2535;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        text_d1 = tmp_45_reg_2525;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        text_d1 = tmp_43_reg_2515;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        text_d1 = tmp_41_reg_2505;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        text_d1 = tmp_39_reg_2495;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        text_d1 = tmp_37_reg_2485;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        text_d1 = tmp_35_reg_2475;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        text_d1 = tmp_33_reg_2465;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        text_d1 = tmp_31_reg_2455;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        text_d1 = tmp_29_reg_2445;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        text_d1 = tmp_27_reg_2435;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        text_d1 = tmp_25_reg_2425;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        text_d1 = tmp_23_reg_2415;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        text_d1 = tmp_21_reg_2405;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        text_d1 = tmp_19_reg_2395;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        text_d1 = tmp_17_reg_2385;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        text_d1 = tmp_15_reg_2375;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        text_d1 = tmp_13_reg_2365;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        text_d1 = tmp_11_reg_2355;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        text_d1 = tmp_9_reg_2345;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        text_d1 = tmp_5_reg_2335;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        text_d1 = tmp_8_reg_2325;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        text_d1 = tmp_4_reg_2315;
    end else begin
        text_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34))) begin
        text_we0 = 1'b1;
    end else begin
        text_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | ((or_cond_fu_1863_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)))) begin
        text_we1 = 1'b1;
    end else begin
        text_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_1129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((ap_sig_ioackin_m_axi_din_gmem_V_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (m_axi_din_gmem_V_RVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((tmp_66_fu_1812_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((ap_sig_ioackin_m_axi_din_gmem_V_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((ap_sig_ioackin_m_axi_din_gmem_V_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((1'b1 == ap_CS_fsm_state82) & (m_axi_din_gmem_V_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign bytes_to_transfer_ca_fu_1808_p1 = bytes_to_transfer_fu_1800_p3;

assign bytes_to_transfer_fu_1800_p3 = ((icmp_fu_1790_p2[0:0] === 1'b1) ? tmp_2_fu_1796_p1 : 7'd64);

assign din_gmem_V_offset_ca_fu_1097_p1 = din_gmem_V_offset;

assign dout_gmem_V_offset_c_fu_1093_p1 = dout_gmem_V_offset;

assign i_1_fu_1818_p2 = (i_reg_1082 + 7'd1);

assign i_idx_1_fu_1839_p2 = (i_idx1_reg_1062 + 64'd1);

assign i_idx_2_fu_1111_p1 = i_idx_fu_1101_p4;

assign i_idx_fu_1101_p4 = {{act_reg_Data_in_addr[63:6]}};

assign icmp_fu_1790_p2 = ((tmp_1_fu_1780_p4 == 26'd0) ? 1'b1 : 1'b0);

assign m_axi_din_gmem_V_ARADDR = sum_reg_2299;

assign m_axi_din_gmem_V_ARBURST = 2'd0;

assign m_axi_din_gmem_V_ARCACHE = 4'd0;

assign m_axi_din_gmem_V_ARID = 1'd0;

assign m_axi_din_gmem_V_ARLEN = 32'd1;

assign m_axi_din_gmem_V_ARLOCK = 2'd0;

assign m_axi_din_gmem_V_ARPROT = 3'd0;

assign m_axi_din_gmem_V_ARQOS = 4'd0;

assign m_axi_din_gmem_V_ARREGION = 4'd0;

assign m_axi_din_gmem_V_ARSIZE = 3'd0;

assign m_axi_din_gmem_V_ARUSER = 1'd0;

assign m_axi_din_gmem_V_AWADDR = sum3_reg_2649;

assign m_axi_din_gmem_V_AWBURST = 2'd0;

assign m_axi_din_gmem_V_AWCACHE = 4'd0;

assign m_axi_din_gmem_V_AWID = 1'd0;

assign m_axi_din_gmem_V_AWLEN = 32'd1;

assign m_axi_din_gmem_V_AWLOCK = 2'd0;

assign m_axi_din_gmem_V_AWPROT = 3'd0;

assign m_axi_din_gmem_V_AWQOS = 4'd0;

assign m_axi_din_gmem_V_AWREGION = 4'd0;

assign m_axi_din_gmem_V_AWSIZE = 3'd0;

assign m_axi_din_gmem_V_AWUSER = 1'd0;

assign m_axi_din_gmem_V_WDATA = {{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{text_load_63_reg_2993}, {text_load_62_reg_2988}}, {text_load_61_reg_2977}}, {text_load_60_reg_2972}}, {text_load_59_reg_2967}}, {text_load_58_reg_2962}}, {text_load_57_reg_2957}}, {text_load_56_reg_2952}}, {text_load_55_reg_2947}}, {text_load_54_reg_2942}}, {text_load_53_reg_2937}}, {text_load_52_reg_2932}}, {text_load_51_reg_2927}}, {text_load_50_reg_2922}}, {text_load_49_reg_2917}}, {text_load_48_reg_2912}}, {text_load_47_reg_2907}}, {text_load_46_reg_2902}}, {text_load_45_reg_2897}}, {text_load_44_reg_2892}}, {text_load_43_reg_2887}}, {text_load_42_reg_2882}}, {text_load_41_reg_2877}}, {text_load_40_reg_2872}}, {text_load_39_reg_2867}}, {text_load_38_reg_2862}}, {text_load_37_reg_2857}}, {text_load_36_reg_2852}}, {text_load_35_reg_2847}}, {text_load_34_reg_2842}}, {text_load_33_reg_2837}}, {text_load_32_reg_2832}}, {text_load_31_reg_2827}}, {text_load_30_reg_2822}}, {text_load_29_reg_2817}}, {text_load_28_reg_2812}}, {text_load_27_reg_2807}}, {text_load_26_reg_2802}}, {text_load_25_reg_2797}}, {text_load_24_reg_2792}}, {text_load_23_reg_2787}}, {text_load_22_reg_2782}}, {text_load_21_reg_2777}}, {text_load_20_reg_2772}}, {text_load_19_reg_2767}}, {text_load_18_reg_2762}}, {text_load_17_reg_2757}}, {text_load_16_reg_2752}}, {text_load_15_reg_2747}}, {text_load_14_reg_2742}}, {text_load_13_reg_2737}}, {text_load_12_reg_2732}}, {text_load_11_reg_2727}}, {text_load_10_reg_2722}}, {text_load_9_reg_2717}}, {text_load_8_reg_2712}}, {text_load_7_reg_2707}}, {text_load_6_reg_2702}}, {text_load_5_reg_2697}}, {text_load_4_reg_2692}}, {text_load_3_reg_2687}}, {text_load_2_reg_2682}}, {text_load_1_reg_2677}}, {text_load_reg_2672}};

assign m_axi_din_gmem_V_WID = 1'd0;

assign m_axi_din_gmem_V_WLAST = 1'b0;

assign m_axi_din_gmem_V_WSTRB = 64'd18446744073709551615;

assign m_axi_din_gmem_V_WUSER = 1'd0;

assign o_idx_1_fu_1845_p2 = (o_idx1_reg_1072 + 64'd1);

assign o_idx_2_fu_1125_p1 = o_idx_fu_1115_p4;

assign o_idx_fu_1115_p4 = {{act_reg_Data_out_add[63:6]}};

assign or_cond_fu_1863_p2 = (tmp_70_fu_1857_p2 & tmp_69_fu_1851_p2);

assign size_fu_1834_p2 = (size1_reg_1052 - bytes_to_transfer_ca_reg_2630);

assign sum3_fu_1829_p2 = (o_idx1_reg_1072 + dout_gmem_V_offset_c_reg_1956);

assign sum_fu_1135_p2 = (din_gmem_V_offset_ca_reg_1961 + i_idx1_reg_1062);

assign tmp_1_fu_1780_p4 = {{size1_reg_1052[31:6]}};

assign tmp_2_fu_1796_p1 = size1_reg_1052[6:0];

assign tmp_66_fu_1812_p2 = ((i_reg_1082 == 7'd64) ? 1'b1 : 1'b0);

assign tmp_68_fu_1824_p1 = i_reg_1082;

assign tmp_69_fu_1851_p2 = (($signed(text_q0) > $signed(8'd96)) ? 1'b1 : 1'b0);

assign tmp_70_fu_1857_p2 = (($signed(text_q0) < $signed(8'd123)) ? 1'b1 : 1'b0);

assign tmp_71_fu_1869_p2 = ($signed(text_q0) + $signed(8'd224));

assign tmp_72_fu_1146_p1 = m_axi_din_gmem_V_RDATA[7:0];

assign tmp_fu_1129_p2 = ((size1_reg_1052 == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    dout_gmem_V_offset_c_reg_1956[63:58] <= 6'b000000;
    din_gmem_V_offset_ca_reg_1961[63:58] <= 6'b000000;
    bytes_to_transfer_ca_reg_2630[31:7] <= 25'b0000000000000000000000000;
end

endmodule //process_action
